---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# maven-make-build-action
name: "maven-build-using-make"
description: "Setup Maven and run make"

inputs:
  path_prefix:
    description: 'Directory location containing project code'
    required: false
    default: '.'
  jdk-version:
    description: "OpenJDK version"
    required: false
    default: "17"
  mvn-version:
    description: "Maven version"
    required: false
    default: "3.8.2"
  make-targets:
    description: "Targets for the make command"
    required: false
    default: "all"
  env-vars:
    # yamllint disable-line rule:line-length
    description: "Pass GitHub variables to be exported as environment variables via `toJSON(vars)` or specific variables encoded in JSON format"
    required: false
    default: "{}"
  env-secrets:
    # yamllint disable-line rule:line-length
    description: "Pass GitHub secrets to be exported as environment variables via `toJSON(secrets)` or specific secrets encoded in JSON format"
    required: false
    default: "{}"
  run-jacoco:
    description: "Boolean defining whether Jacoco should be run"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: 'Setup action/environment'
      shell: bash
      env:
        INPUT_PATH_PREFIX: ${{ inputs.path_prefix }}
      run: |
        # Verify action/environment
        path_prefix="${INPUT_PATH_PREFIX}"
        # Verify path_prefix a valid directory path
        if [ ! -d "$path_prefix" ]; then
          echo 'Error: invalid path/prefix to project directory ‚ùå'; exit 1
        fi

    - name: Setup JDK
      id: setup-jdk
      # yamllint disable-line rule:line-length
      uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5.0.0
      with:
        java-version: ${{ inputs.jdk-version }}
        distribution: "temurin"

    - name: Setup Maven
      id: setup-maven
      # yamllint disable-line rule:line-length
      uses: s4u/setup-maven-action@4f7fb9d9675e899ca81c6161dadbba0189a4ebb1 # v1.18.0
      with:
        java-version: ${{ inputs.jdk-version }}
        maven-version: ${{ inputs.mvn-version }}
        checkout-enabled: false

    - name: Export env variables
      id: export-env-variables
      if: ${{ inputs.env-vars != '{}' }}
      # yamllint disable-line rule:line-length
      uses: infovista-opensource/vars-to-env-action@3d3e7c8ae1e9e5fcd9ce83e56ab85a6a135d2ffa # v2.0.0
      with:
        secrets: ${{ inputs.env-vars }}

    - name: Export env secrets
      id: export-env-secrets
      if: ${{ inputs.env-secrets != '{}' }}
      # yamllint disable-line rule:line-length
      uses: infovista-opensource/vars-to-env-action@3d3e7c8ae1e9e5fcd9ce83e56ab85a6a135d2ffa # v2.0.0
      with:
        secrets: ${{ inputs.env-secrets }}

    - name: Build code with Make
      id: build-make
      shell: bash
      env:
        INPUT_PATH_PREFIX: ${{ inputs.path_prefix }}
      # yamllint disable rule:line-length
      run: |
        # Build Maven project with Make
        cd "${INPUT_PATH_PREFIX}"
        make ${{ inputs.make-targets }}

    # yamllint enable rule:line-length
    - name: Generate JaCoCo Badge
      id: jacoco
      if: ${{ !env.ACT && inputs.run-jacoco }} # skip during local testing
      # yamllint disable-line rule:line-length
      uses: cicirello/jacoco-badge-generator@72266185b7ee48a6fd74eaf0238395cc8b14fef8 # v2.12.1
      with:
        badges-directory: badges
        generate-branches-badge: true
        generate-summary: true
        on-missing-report: quiet

    - name: Log coverage percentage
      id: log-coverage
      if: ${{ inputs.run-jacoco && steps.jacoco.outcome == 'success' }}
      shell: bash
      run: |
        echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
        echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"
